# File: .github/workflows/build.yml
name: Build luci-app-netguard (25.02)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  MIRROR_SOURCE: "https://mirrors.tuna.tsinghua.edu.cn"  # 国内镜像加速
  SDK_VERSION: "25.02"                                   # 适配 2025 年 SDK

jobs:
  compile:
    runs-on: ubuntu-24.04    # 2025 年 GitHub 默认运行环境
    timeout-minutes: 90

    steps:
      # ====================
      # 1. 系统依赖安装
      # ====================
      - name: Install Dependencies
        run: |
          sudo sed -i "s|archive.ubuntu.com|${MIRROR_SOURCE#*://}|g" /etc/apt/sources.list
          sudo apt-get update -o Acquire::Check-Valid-Until=false
          sudo apt-get install -y \
            build-essential ccache git gawk libssl-dev libcrypto++-dev \
            zlib1g-dev python3.12-venv python3-pip libffi-dev jq

      # ====================
      # 2. 下载 OpenWrt SDK
      # ====================
      - name: Download SDK
        run: |
          SDK_URL="$MIRROR_SOURCE/openwrt/releases/$SDK_VERSION/targets/x86/64/openwrt-sdk-$SDK_VERSION-x86-64_gcc-14.2.0_musl.Linux-x86_64.tar.xz"
          for retry in {1..5}; do
            wget --no-check-certificate --tries=3 --timeout=60 "$SDK_URL" -O sdk.tar.xz && break
            sleep $((retry*10))
          done
          tar --warning=no-unknown-keyword -xvf sdk.tar.xz --strip-components=1 -C $GITHUB_WORKSPACE
          [ -f "$GITHUB_WORKSPACE/staging_dir/host/bin/opkg" ] || { echo "❌ SDK 解压失败！"; exit 1; }

      # ====================
      # 3. 拉取插件源码
      # ====================
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: xxtt8812/luci-app-netguard
          ref: main                   # 指定分支/标签
          path: package/luci-app-netguard
          sparse-checkout: |          # 仅拉取必要文件
            /src
            /Makefile
            /patches

      # ====================
      # 4. 环境配置
      # ====================
      - name: Setup Environment
        run: |
          python3.12 -m venv .venv
          source .venv/bin/activate
          pip config set global.index-url $MIRROR_SOURCE/pypi/simple
          pip install cryptography==43.0.0  # 2025 年兼容版本

          echo "STAGING_DIR=$GITHUB_WORKSPACE/staging_dir" >> $GITHUB_ENV
          echo "PATH=$STAGING_DIR/host/bin:$PATH" >> $GITHUB_ENV

      # ====================
      # 5. 缓存优化
      # ====================
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            openwrt/dl
            openwrt/build_dir
          key: ${{ runner.os }}-25.02-${{ hashFiles('package/luci-app-netguard/Makefile') }}

      # ====================
      # 6. 执行编译
      # ====================
      - name: Build Package
        run: |
          cd package/luci-app-netguard
          make -j$(($(nproc)*2)) \
            CCACHE=1 \
            CCACHE_COMPRESS=1 \
            FORCE_UNSAFE_CONFIGURE=1 \
            V=s

          # 验证产物
          [ -f "bin/packages/x86_64/luci/luci-app-netguard_25.02-*.ipk" ] || { echo "❌ 编译失败！"; exit 1; }

      # ====================
      # 7. 上传产物（可选）
      # ====================
      - name: Upload Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: netguard-ipk
          path: package/luci-app-netguard/bin/packages/*/luci-app-netguard_*.ipk
