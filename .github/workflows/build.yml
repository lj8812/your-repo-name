name: Auto Build luci-app-netguard (No Docker)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 安装基础编译工具链
    - name: Setup OpenWrt Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ccache \
        git gawk libssl-dev libncurses5-dev python3 python3-distutils
        
    # 2. 下载指定架构的OpenWrt SDK (示例为x86_64)
    - name: Download OpenWrt SDK
      run: |
        SDK_URL="https://downloads.openwrt.org/releases/23.05/targets/x86/64/openwrt-sdk-23.05-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        wget -q $SDK_URL -O sdk.tar.xz
        tar -xf sdk.tar.xz --strip-components=1 -C $GITHUB_WORKSPACE
        
    # 3. 拉取远程仓库及子模块
    - name: Checkout luci-app-netguard
      uses: actions/checkout@v4
      with:
        repository: xxtt8812/luci-app-netguard
        submodules: recursive
        path: package/luci-app-netguard
        
    # 4. 配置环境变量
    - name: Configure Env
      run: |
        echo "STAGING_DIR=$GITHUB_WORKSPACE/staging_dir" >> $GITHUB_ENV
        echo "PATH=$GITHUB_WORKSPACE/staging_dir/host/bin:$PATH" >> $GITHUB_ENV
        
    # 5. 初始化OpenWrt依赖
    - name: Initialize Feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    # 6. 执行编译
    - name: Build Package
      run: |
        cd package/luci-app-netguard
        make -j$(nproc) V=s
        
    # 7. 上传编译产物
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: netguard-ipk
        path: bin/packages/*/base/luci-app-netguard*.ipk
