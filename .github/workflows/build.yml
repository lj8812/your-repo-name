# File: .github/workflows/build-luci-app-netguard.yml
name: Build luci-app-netguard (25.02)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  MIRROR_SOURCE: "https://mirrors.tuna.tsinghua.edu.cn"  # 中国境内加速源
  SDK_VERSION: "25.02"                                   # 2025年最新SDK版本

jobs:
  compile:
    runs-on: ubuntu-20.04
    timeout-minutes: 120

    steps:
      # ====================
      # 1. 系统级依赖安装
      # ====================
      - name: Setup Ubuntu Environment
        run: |
          # 替换apt源为清华镜像
          sudo sed -i "s/archive.ubuntu.com/${{ env.MIRROR_SOURCE#*:// }}/g" /etc/apt/sources.list
          sudo apt-get update -o Acquire::Check-Valid-Until=false
          
          # 安装编译工具链（2025年新增libcrypto++-dev）
          sudo apt-get install -y \
            build-essential ccache git gawk libssl-dev libcrypto++-dev \
            libncurses5-dev zlib1g-dev python3-venv python3-pip python3-dev \
            libffi-dev file unzip jq

      # ====================
      # 2. OpenWrt SDK 配置
      # ====================
      - name: Prepare OpenWrt SDK
        run: |
          SDK_FILENAME="openwrt-sdk-${{ env.SDK_VERSION }}-x86-64_gcc-14.1.0_musl.Linux-x86_64"
          SDK_URL="${{ env.MIRROR_SOURCE }}/openwrt/releases/${{ env.SDK_VERSION }}/targets/x86/64/$SDK_FILENAME.tar.xz"
          
          # 带重试机制的下载（适配2025年网络环境）
          for i in {1..5}; do
            wget --no-check-certificate --tries=3 --timeout=120 "$SDK_URL" -O sdk.tar.xz && break
            sleep $((i*10))
          done
          
          # 强制解压并验证完整性
          tar --warning=no-unknown-keyword -xvf sdk.tar.xz --strip-components=1 -C $GITHUB_WORKSPACE
          [ -f "$GITHUB_WORKSPACE/staging_dir/host/bin/opkg" ] || { echo "SDK extraction failed!"; exit 1; }

      # ====================
      # 3. 源码仓库配置
      # ====================
      - name: Checkout Source Code
        uses: actions/checkout@v4
        with:
          repository: xxtt8812/luci-app-netguard
          ssh-key: ${{ secrets.DEPLOY_KEY_2025 }}  # 2025年新密钥规范
          submodules: recursive
          path: package/luci-app-netguard
          sparse-checkout: |  # 优化克隆内容
            /package/luci-app-netguard/Makefile
            /package/luci-app-netguard/src

      # ====================
      # 4. 编译环境优化
      # ====================
      - name: Configure Build Environment
        run: |
          # Python虚拟环境（2025年需python3.12）
          python3.12 -m venv .venv
          source .venv/bin/activate
          pip config set global.index-url ${{ env.MIRROR_SOURCE }}/pypi/simple
          pip install --upgrade pip wheel
          pip install cryptography==42.0.3  # 2025年兼容版本

          # 环境变量配置
          echo "STAGING_DIR=$GITHUB_WORKSPACE/staging_dir" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/staging_dir/host/bin:$PATH" >> $GITHUB_ENV
          echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" >> $GITHUB_ENV

      # ====================
      # 5. 智能缓存系统
      # ====================
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            openwrt/dl
            openwrt/build_dir
          key: ${{ runner.os }}-25.02-${{ hashFiles('package/luci-app-netguard/Makefile') }}
          restore-keys: |
            ${{ runner.os }}-25.02-

      # ====================
      # 6. 编译执行阶段
      # ====================
      - name: Build Package
        run: |
          cd package/luci-app-netguard
          
          # 内存优化编译（2025年新增ZSTD压缩）
          make -j$(($(nproc)*2)) \
            CCACHE=1 \
            CCACHE_COMPRESS=1 \
            CCACHE_COMPRESSLEVEL=3 \
            CCACHE_COMPRESSOR=zstd \
            V=sc

          # 产物验证
          [ -f "bin/packages/x86_64/luci/luci-app-netguard_git-25.02*.ipk" ] || exit 1
